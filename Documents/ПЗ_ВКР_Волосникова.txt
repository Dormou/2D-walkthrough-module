     Министерство образования и науки Российской Федерации
     ФГБ ОУ ВПО «Волгоградский государственный технический университет»
     Кафедра Системы автоматизированного проектирования
     и поискового конструирования
          
     Утверждаю
     Зав. кафедрой САПР и ПК
     М. В. Щербаков
     _________________
                                                                      (подпись, инициалы и фамилия)
                                             ________________
                                                                      (дата)     
ПОЯСНИТЕЛЬНАЯ ЗАПИСКА
к      выпускной работе бакалавра              на тему
(наименование работы)
     Разработка модуля генерации «2D прогулок»
         
     Автор	_____И.А.Волосникова________
        (подпись и дата подписания)			(инициалы и фамилия)
     Обозначение 	ВРБ — 40 461 806 — 10.27— -- — 19.81
        (код документа)
     Группа ИВТ-465
                	(шифр группы)
     Направление 09.03.01 — Информатика и вычислительная техника	
        
     _____________________________________________________________________
         
     Руководитель работы      О. А. Шабалина   
        (подпись и дата подписания)	(инициалы и фамилия)
         
     Консультанты по разделам:
     _________________________ _________________    __________________
                           (краткое наименование раздела)	(подпись и дата подписания)                (инициалы и фамилия)
     _________________________ _________________    __________________
                           (краткое наименование раздела)	(подпись и дата подписания)                (инициалы и фамилия)
     
     Нормоконтролер_____________________                     ______________








Волгоград 2020
      Аннотация
      
      Данный документ содержит постановку цели и задач бакалаврской работы, анализ существующих решений по генерации 2D маршрута, описание проектирования и разработки модуля генерации «2D прогулок», экранные формы модуля и описание процесса тестирования.		
      

      Abstract

      This document contains the statement of the goals and objectives of the bachelor’s work, the analysis of existing applications for generating a 2D route, a description of the design and development of the module for generating «2D walkthrough», module screen forms and a description of the testing process.


Оглавление
     Введение	6
     1	Анализ способов генерации 2D маршрута на карте закрытого пространства	7
     1.1	Краткое описание задачи генерации «2D прогулки»	7
     1.2	Способы представления закрытого пространства	7
     1.2.1	Сетка	7
     1.2.2	Полигональная карта	8
     1.2.3	Навигационная сетка	8
     1.3	Способы построения маршрута в закрытом пространстве	9
     1.3.1	Способы формализации закрытого пространства	9
     1.3.2	Описание задачи построения маршрута	10
     1.4	Анализ алгоритмов поиска пути	11
     1.4.1	Алгоритмы поиска кратчайшего пути между двумя вершинами	11
     1.4.2	Алгоритмы решения задачи коммивояжера	12
     1.5	Анализ программных решений по навигации в закрытом пространстве	14
     1.5.1	Приложения indoor-навигации	14
     1.5.2	Мобильный гид «Кунсткамера»	15
     1.5.3	Мобильный гид по Музею А.С.Пушкина	16
     1.5.4	Мобильное приложение «Shopping Guide»	18
     1.5.5	Мобильное приложение «NaviMail»	19
     1.5.6	Чат-бот «Картография»	21
     1.6	Сравнение существующих программных решений	22
     1.7	Выводы	24
     2	Разработка алгоритмов генерации «2D прогулки»	25
     2.1	Описание задачи генерации «2D прогулки»	25
     2.2	Разработка алгоритма построения маршрута	26
     2.3	Разработка алгоритма визуализации маршрута	30
     2.4	Разработка алгоритма моделирования прохождения маршрута	31
     2.5	Выводы	32
     3	Проектирование модуля генерации «2D прогулки»	32
     3.1	Описание концепции модуля генерации «2D прогулки»	32
     3.2	Описание формата входных и выходных данных	34
     3.3	Проектирование графического интерфейса пользователя	35
     3.4	Описание сценариев использования	35
     3.5	Выводы	36
     4	Реализация модуля генерации «2D прогулки»	36
     4.1	Выбор средств реализации	36
     4.2	Описание этапов реализации модуля	36
     Заключение	36
     СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ	37



      Введение
      Одной из отличительных особенностей современной жизни является большое количество магазинов, торговых и культурных центров. Зачастую они занимают большую площадь, имеют много отделов или залов, и поэтому быстро сориентироваться в них и найти нужное место становится затруднительно. Для помощи в решении этих задач существуют интерактивные информационные стенды [1], системы указателей, справочные службы. Однако они предназначены в основном для людей, не имеющих ограничений по состоянию здоровья.
      Для людей с физическими ограничениями трудности при взаимодействии с системами навигации постепенно уменьшаются: системы указателей дублируются с использованием шрифта Брайля, информационные стенды имеют функции голосовых подсказок. Но для людей с ограниченными интеллектуальными возможностями (People with Intellectual Disabilities, PID) этот аспект повседневной жизни все еще представляет трудности, поскольку некоторые группы PID не умеют читать и писать, многие испытывают трудности при использовании карт и коммуникации с незнакомыми людьми.
      Наиболее распространенным решением для поддержки таких людей является их сопровождение и помощь в ориентировании в незнакомой обстановке. Однако сейчас все большее значение приобретает задача социализации PID, развитие и поддержка их самостоятельности. Многие PID стремятся к независимости от опекунов в повседневных действиях, активно участвуют в социальной жизни, используют новые технологии, в том числе и мобильные приложения. Поэтому другим способом помощи может быть использование специализированных мобильных приложений, разработанных для навигации в закрытом пространстве.
      Ориентирование и составление маршрута в закрытом пространстве является частью многих действий: совершение покупок в супермаркете, посещение торгового центра, культурного или больничного комплекса. Поэтому является актуальной задача разработки модуля для генерации, визуализации и моделирования прохождения маршрута на карте закрытого пространства, т.е. модуля генерации «2D прогулки», который можно использовать при создании конфигурируемых приложений для PID.
      
      1 Анализ способов генерации 2D маршрута на карте закрытого пространства
      1.1 Краткое описание задачи генерации «2D прогулки»
     «2D прогулка» является одним из способов поддержки ориентирования в закрытом пространстве и включает в себя следующие элементы:
     - отображение карты закрытого пространства;
     - построение маршрута через две и более заданные на карте точки;
     - изображение маршрута на карте пространства;
     - моделирование прохождения маршрута.
     Каждый из элементов «2D прогулки» может быть реализован различными способами.
     
1.2 Способы представления закрытого пространства
1.2.1 Сетка
     Сетка – это наиболее простой способ хранения информации о пространстве. Карта пространства разбивается на небольшие участки простой формы (например, квадраты или шестиугольники), каждый из которых может быть свободным для передвижения, а может являться препятствием (рис.1). 

а) схематическое изображение

б) реализация карты
Рисунок 1 – Представление пространства в виде сетки
     
1.2.2 Полигональная карта
     Для создания полигональной карты препятствия представляются в виде полигонов. Вершины полигонов соединяются между собой отрезками в том случае, если между ними есть прямой путь, не содержащий препятствий (т.е. вершины являются видимыми друг для друга). При таком представлении количество отрезков может быть до n2 для n вершин (рис.2).

Рисунок 2 – Представление пространства в виде полигональной карты

1.2.3 Навигационная сетка
     Для создания навигационной сетки доступное для передвижения пространство представляется в виде непересекающихся полигонов. Достаточным набором точек для описания пространства являются центры полигонов, однако могут использоваться точки на гранях или в вершинах полигонов, а также комбинация нескольких вариантов (рис.3).
     
     а) схематическое изображение
     
     б) реализация карты
     Рисунок 3 – Представление пространства в виде навигационной сетки
     
1.3 Способы построения маршрута в закрытом пространстве
1.3.1 Способы формализации закрытого пространства
     Для построения маршрута пространство должно быть формализовано в виде графа. Если необходимо построение оптимального маршрута, граф должен быть взвешенным. Весом ребра может являться длина пути между двумя инцидентными вершинами (если осуществляется поиск маршрута, оптимального по длине) или время перехода между ними (если осуществляется поиск маршрута, оптимального по времени прохождения).
     Если пространство представлено в виде сетки, каждому доступному для перемещения элементу сетки ставится в соответствие вершина графа. Затем каждая вершина соединяется ребром с каждой соседней ей вершиной, если она существует (у каждой вершины может быть до 4 соседних, если допустимо передвижение только по горизонтали и вертикали, и до 8 соседних, если допустимо также передвижение по диагонали).
     Представление пространства в виде полигональной карты является формализованным: вершины полигонов являются вершинами графа, а отрезки, соединяющие вершины – ребрами графа.
     Для формализации пространства, представленного в виде навигационной сетки, в качестве вершин графа принимается набор точек, описывающих пространство. Вершины соединяются ребрами в том случае, если между точками существует прямой путь, не выходящий за границы полигонов (т.е. проходящий по доступному для передвижения пространству).
     
1.3.2 Описание задачи построения маршрута
     Маршрут на карте пространства соответствует пути на графе, в виде которого формализовано пространство. Для построения маршрута задается список точек, через которые должен проходить маршрут: начальная и конечная точки, а также множество промежуточных точек. Порядок обхода промежуточных точек может быть жестко заданным или произвольным. Множество промежуточных точек может быть пустым. Если заданные точки не соответствуют вершинам графа, они добавляются к множеству вершин и соединяются ребром с ближайшей вершиной по правилам, аналогичным тем, что были применены при формализации пространства в виде графа.
     Чаще всего производится поиск оптимального маршрута через заданные точки. Для нахождения оптимального пути между двумя последовательными точками маршрута используются алгоритмы поиска кратчайшего пути между двумя вершинами. Если порядок обхода промежуточных точек не задан, нахождение маршрута является незамкнутым вариантом задачи коммивояжера. Для построения маршрута в этом случае находятся кратчайшие пути между каждой парой заданных точек, а затем используются алгоритмы решения задачи коммивояжера.

1.4 Анализ алгоритмов поиска пути
1.4.1 Алгоритмы поиска кратчайшего пути между двумя вершинами
     Алгоритм Дейкстры [2] позволяет найти кратчайший путь от одной вершины графа до всех остальных, применяется только для графов без отрицательных ребер. Алгоритм начинает работу со стартовой точки, на каждом шаге рассматривается ближайшая нерассмотренная вершина, а все смежные с ней добавляются к множеству вершин, подлежащих рассмотрению. Алгоритм обеспечивает нахождение кратчайшего пути от стартовой до целевой вершины. Данный алгоритм считается одним из самых простых и подходит для графов с небольшим количеством вершин.
     Алгоритм Беллмана-Форда [2] также предназначен для поиска кратчайшего пути во взвешенном графе, однако, в отличие от алгоритма Дейкстры, допускает наличие ребер с отрицательным весом. Алгоритм использует полный перебор всех вершин графа, что приводит к большим затратам времени и памяти.
     Алгоритм Флойда-Уоршелла [2] является динамическим алгоритмом для поиска кратчайших расстояний между всеми вершинами взвешенного ориентированного графа. При применении его к решению задач на значительно разветвленном графе требуются значительные затраты вычислительных ресурсов.
     Алгоритм Ли [2], или волновой алгоритм, работает на дискретном рабочем поле, представляющем собой ограниченную замкнутой линией фигуру, разбитую на прямоугольные ячейки. Множество всех ячеек разбивается на проходимые, непроходимые, стартовые и финишные. Алгоритм предназначен для поиска кратчайшего пути от стартовой ячейки к финишной, если он существует.
     Алгоритм поиска А* [3] позволяет найти кратчайший путь от стартовой вершины к целевой, используя алгоритм поиска по первому наилучшему совпадению на графе. Алгоритм А* является расширением алгоритма Дейкстры, более высокая производительность достигается за счет того, что порядок обхода вершин определяется эвристической функцией f(x) = h(x) + g(x), где h(x) – функция эвристической оценки расстояния от рассматриваемой вершины к конечной, g(x) – функция стоимости достижения рассматриваемой вершины из начальной (может быть как эвристической, так и нет). Алгоритм А* обеспечивает нахождение оптимального пути. Временная сложность алгоритма зависит от эвристики. В худшем случае, число вершин, исследуемых алгоритмом, растет экспоненциально по сравнению с длиной оптимального пути.
     
1.4.2 Алгоритмы решения задачи коммивояжера
     Алгоритмы для решения задачи коммивояжера можно разделить на точные и неточные. Точные алгоритмы включают в себя перебор всех возможных вариантов, при небольшом количестве вершин решения могут быть найдены быстро, однако при увеличении количества вершин время работы точных алгоритмов возрастает экспоненциально [4]. Алгоритмы неточной группы обычно находят потенциально неоптимальные решения, но за значительно меньшее время.
     Один из самых очевидных методов решения задачи коммивояжера – метод полного перебора или грубой силы, заключающийся в рассмотрении всех вариантов путей (гамильтоновых контуров) и нахождения пути с минимальным весом. Данный метод гарантирует решение задачи, однако неэффективен при работе с большим объемом данных, т.к. в нем требуется найти вес (n – 1)! гамильтоновых контуров, где n – число вершин графа [5].
     Метод ветвей и границ часто используется для нахождения оптимального решения задач комбинаторной оптимизации. Одним из главных недостатков метода является необходимость целиком решать задачи линейного программирования во всей области допустимых решений [6]. Несмотря на то, что алгоритм является надежным методом нахождения оптимального решения, для задач с большим объемом данных метод ветвей и границ является очень трудоемким.
     Алгоритм Гомори, или метод отсечений, используется для построения точных или приближенных задач, особенно часто встречается в сочетании с методом ветвей и границ и тогда называется методом ветвей и отсечений [7]. Оба метода основаны на решении последовательности подзадач линейного программирования, однако метод отсечений требует меньшего объема памяти для хранения дерева решений.
     Общим для всех описанных выше алгоритмов является высокая трудоемкость и значительное увеличение времени, объема памяти и вычислительных ресурсов, необходимых для нахождения решения, при увеличении числа вершин в исходном графе.
     Самый распространенный способ измерить эффективность эвристического алгоритма для решения задачи коммивояжера – это сравнить результаты с нижней гранью Хелд-Карпа, т.е. сравнить с решением, найденным за полиномиальное время при помощи симплекс-метода. Это решение на 0,8 % хуже оптимального маршрута [8].
     Одним из самых простых эвристических методов решения задачи коммивояжера является алгоритм ближайшего соседа. Главное правило алгоритма – всегда выбирать ближайшую к текущей вершину. В общем случае трудоемкость решения не превышает O(n2), где n – количество вершин в графе. Нижняя граница стоимости оптимального маршрута на 10% выше нижней грани Хелд-Карпа [9].
     Важным недостатком алгоритма ближайшего соседа является то, что в качестве оптимального часто принимается локально оптимальное решение. Этой проблемы позволяет избежать алгоритм поиска с запретами [10]. Данный метод позволяет переходить от одного локально оптимального решения к другому в поиске глобального оптимума, после перехода ребро попадает в список запретов и повторно не используется, кроме тех случаев, когда оно может улучшить построенный оптимальный путь. На практическом уровне запрещенный набор сохраняется как комбинация ранее использованных ребер, которая позволяет построить дальнейший путь относительно текущего решения и соседних узлов. Главным недостатком этого метода служит его время выполнения: трудоемкость алгоритма оценивается как О(n3), где n – количество вершин в графе [11]. 
     Еще одним распространенным решением является жадный алгоритм. Суть алгоритма заключается в переборе всех возможных ребер графа, исходящих из конкретной вершины. Среди рассматриваемых ребер выбирается то, у которого минимален вес перехода в другую вершину графа. После чего происходит сам переход, и алгоритм повторяется из новой вершины. Процедура работает до тех пор, пока не будет построен гамильтонов цикл, который и считается оптимальным маршрутом. Вес найденного маршрута выше нижней границы Хелд-Карпа на 15-20% [11]. 
     В основе генетического алгоритма лежат природные процессы естественного отбора, в ходе которого выживают особи с наибольшей приспособленностью к условиям окружающей среды. Задача оптимизации обозначается как задача нахождения функции приспособленности. В случае применения генетического алгоритма для решения задачи поиска оптимального пути, характеристикой приспособленности является мера длины маршрута. Существует несколько реализаций классического генетического алгоритма, различающихся подходом к реализации его шагов. Также как и в алгоритме поиска с запретами, при большом количестве узлов значительно возрастает трудоемкость алгоритма.

1.5 Анализ программных решений по навигации в закрытом пространстве
1.5.1  Приложения indoor-навигации
     Технология навигации и обнаружения объектов (устройств, людей) внутри зданий носит название indoor-навигации [12]. В закрытых помещениях использование спутниковой системы навигации (GPS) недоступно: ослабление и рассеяние сигнала приводит к низкой точности позиционирования, к которой внутри зданий предъявляются повышенные требования. Вместо этого в помещении устанавливаются Wi-Fi передатчики или Bluetooth маяки, определение местоположения устройства осуществляется путем обработки их сигнала, а также данных от внутренних датчиков смартфона – гироскопа, акселерометра, барометра, компаса. Возможно использование двух методов определения местоположения: трилатерация (для этого указывается расположение маяков) или метод «цифровых отпечатков» (для этого производится замер радиокарты – в разных точках карты измеряется мощность сигнала от окружающих маяков, чтобы затем можно было сравнить значения в реальном времени со значениями, привязанными к карте помещения). Такой способ навигации требует установки дополнительного аппаратного обеспечения в помещениях, поэтому приложения, использующие данную технологию, не рассматриваются в рамках данной работы.

1.5.2 Мобильный гид «Кунсткамера»
     Мобильный гид «Кунсткамера» [14] разработан российской компанией ООО «КАМИС». Гид представляет собой свободно распространяемое мобильное приложение для платформ Android и iOS. 
     В приложении реализованы следующие функции:
     - отображение карты музея;
     - отображение описания и изображения экспоната при нажатии на соответствующий ему объект на карте;
     - воспроизведение аудио экскурсии по выбранной экспозиции.
     Маршрут между объектами составляется неявным образом (без отображения на карте) путем озвучивания номеров экспонатов во время аудио экскурсии. Возможность проложить маршрут между двумя и более произвольно заданными точками отсутствует. Для использования приложения необходим навык чтения. Экранные формы приложения представлены на рис.4–5.

Рисунок 4 – Карта музея

Рисунок 5 – Просмотр информации по экспонату

1.5.3 Мобильный гид по Музею А.С.Пушкина
     Мобильный гид [15] разработан российской компанией Indoors Navigation. Гид представляет собой свободно распространяемое мобильное приложение для платформ Android и iOS. 
     В приложении реализованы следующие функции:
     - отображение карты музея;
     - воспроизведение аудио экскурсии по выбранной экспозиции;
     - построение и визуализация маршрута между двумя точками, заданными пользователем;
     - навигация по маршруту с использованием описания участков маршрута или элементов дополненной реальности (AR).
     Возможность проложить составной маршрут (между тремя и более произвольно заданными точками) отсутствует. Для использования приложения необходим навык чтения. Экранные формы приложения представлены на рис.6–7.
     
     

Рисунок 6 – Карта музея

Рисунок 7 – Прокладывание маршрута
1.5.4 Мобильное приложение «Shopping Guide»
     Мобильное приложение «Shopping Guide» [16] разработано российской компанией NaviGuide и свободно распространяется для платформ Android и iOS. 
     В приложении реализованы следующие функции:
     - выбор торгового центра;
     - отображение карты торгового центра;
     - поиск объекта на карте;
     - построение и визуализация маршрута между двумя точками, заданными пользователем.
     В приложении доступны карты 45 торговых центров. Возможность проложить составной маршрут (между тремя и более произвольно заданными точками) отсутствует. Для использования приложения необходим навык чтения. Экранные формы приложения представлены на рис.8–9.

Рисунок 8 – Карта торгового центра

Рисунок 9 – Прокладывание маршрута

1.5.5 Мобильное приложение «NaviMail»
     Мобильное приложение «NaviMail» [17] разработано российской компанией SmartLabs и свободно распространяется для платформ Android и iOS. 
     В приложении реализованы следующие функции:
     - выбор торгового центра;
     - отображение карты торгового центра;
     - поиск объекта на карте.
     В приложении доступны карты 2 торговых центров. Возможность проложить маршрут между двумя и более произвольно заданными точками отсутствует. Для использования приложения необходим навык чтения. Экранные формы приложения представлены на рис.10–11.

Рисунок 10 – Карта торгового центра
		
а) поиск по названию			б) поиск по товару
Рисунок 11 – Поиск объекта
     
1.5.6 Чат-бот «Картография»
     Чат-бот «Картография» [18] разработан российской компанией MOLOKO для социальных сетей ВКонтакте и Facebook и мессенджера Telegram. 
     Чат-бот реализует следующие функции:
     - выбор торгового центра;
     - отображение карты торгового центра;
     - поиск объекта на карте;
     - построение и визуализация маршрута между двумя точками, заданными пользователем;
     - текстовое описание маршрута.
     В приложении доступны карты 5 торговых центров. Возможность проложить составной маршрут (между тремя и более произвольно заданными точками) отсутствует. Для использования приложения необходимы навыки чтения и письма. Пример работы чат-бота представлен на рис.12.

Рисунок 12 – Поиск объекта и построение маршрута

1.6 Сравнение существующих программных решений
     Критерии оценки существующих программных решений должны учитывать не только их функциональность, но возможность их применения PID.
     Данная категория пользователей обладает следующими особенностями. Во-первых, многие PID не владеют навыками чтения и письма, поэтому эти навыки не должны быть обязательными для использования приложения. Во-вторых, приложение должно быть доступно для использования в режиме офлайн, чтобы обеспечить возможность обучения PID навыку ориентирования дома или в медицинском учреждении, под контролем опекуна. Таким образом, PID смогут подготовиться к самостоятельному посещению общественных мест и ориентированию в них, а также приобрести базовые навыки работы с картой. В-третьих, должна быть возможность прокладывать маршрут, проходящий через несколько точек (например, на основании списка покупок). Для многих категорий PID самостоятельное посещение общественных мест может вызвать волнение, долгое концентрирование внимания на одной задаче (следование маршруту) может быть затруднительным, поэтому прокладываемый маршрут должен быть как можно более коротким, чтобы сократить время его прохождения.
     Таким образом, оценка существующих решений должна быть произведена по следующим критериям:
     - наличие функции составления маршрута; 
     - режим работы (онлайн или офлайн);
     - навыки, необходимые для использования.
     Результаты сравнения представлены в Таблице 1.
     Таблица 1 – Анализ программных решений по навигации в закрытом пространстве
Название решенияКритерии анализа решенийФункция составления маршрутаРежим работыНавыки, необходимые для использованияМобильный гид «Кунсткамера»НетОффлайнЧтениеМобильный гид по Музею А.С.Пушкина
ЕстьОнлайн и оффлайнЧтениеМобильное приложение «Shopping Guide»ЕстьОффлайнЧтениеМобильное приложение «NaviMail»НетОнлайн и оффлайнЧтениеЧат-бот «Картография»
ЕстьОнлайнЧтение и письмо     
     Часть рассмотренных решений жестко привязаны к объектам, внутри которых осуществляется навигация. Остальные предоставляют возможность выбора из нескольких объектов, однако исходный код всех решений является закрытым, и добавление новых объектов возможно только разработчиками.
     Некоторые из рассмотренных решений не имеют функции построения маршрута, остальные выполняют только построение простого маршрута, т.е. соединяющего две точки. Функция генерации составного маршрута (с несколькими промежуточными точками) во всех рассмотренных решениях отсутствует.
     
1.7 Выводы
     Задача генерации «2D прогулки» была декомпозирована на несколько подзадач: отображение карты закрытого пространства, построение и визуализация маршрута, моделирование его прохождения. Для каждой подзадачи были рассмотрены существующие способы ее решения.
     Анализ существующих программных решений по навигации в закрытом пространстве показал, что они не ориентированы на PID, поскольку для их использования нужны навыки чтения и письма, список объектов, для которых доступны функции навигации, ограничен, а функция прокладывания составного маршрута недоступна.
     Таким образом, актуальной является задача разработки модуля для мобильного приложения, позволяющего генерировать и визуализировать 2D маршрут на карте закрытого пространства, а также моделировать его прохождение, с адаптированным для PID интерфейсом.
     Целью данной работы является разработка модуля генерации «2D прогулок».
     Для достижения поставленной цели необходимо решить следующие задачи:
- разработать алгоритм построения оптимального маршрута;
- разработать алгоритм визуализации маршрута;
- разработать алгоритм моделирования прохождения маршрута;
- разработать интерфейс модуля, ориентированный на PID, не владеющих навыками чтения и письма;
- реализовать модуль генерации «2D прогулок»;
- протестировать полученный модуль и, при необходимости, исправить выявленные при тестировании недостатки.
     
2 Разработка алгоритмов генерации «2D прогулки»
2.1 Описание задачи генерации «2D прогулки»
     В общем виде задачу генерации маршрута на карте закрытого пространства можно определить следующим образом. Пространство представляется в виде 2D или 3D модели помещения (рис.13), имеющего один или несколько входов и выходов. В пространстве находятся объекты – 2D или 3D модели предметов, имеющие собственные параметры и поведение. Для построения маршрута пространство формализуется в виде графа. Способ формализации пространства должен быть выбран на основе произведенного ранее анализа.

Рисунок 13 – Модель пространства
     Далее происходит генерация маршрута. Маршрут задается набором точек, состоящем из начальной, конечной и множества промежуточных точек. В частном случае множество промежуточных точек может быть пустым, в этом случае маршрут является простым. Маршрут представляет собой ломаную линию, соединяющую заданные точки в обход препятствий. Маршрут строится на основании графа с использованием рассмотренных алгоритмов поиска оптимального пути и алгоритмов решения задачи коммивояжера. Затем построенный маршрут визуализируется на карте пространства (рис.14).

Рисунок 14 – Модель карты пространства

2.2 Разработка алгоритма построения маршрута
     Первым этапом алгоритма построения маршрута (рис.15) является формализация пространства в виде взвешенного графа. 
     Постановка задачи генерации «2D прогулки» предполагает, что пространство, в котором осуществляется навигация, имеет большую площадь и сложную структуру, поэтому представление пространства в виде сетки потребует большого объема памяти для хранения данных. В случае представления пространства в виде полигональной карты, хранение большого числа ребер также потребует значительных затрат ресурсов. Навигационная сетка является наиболее подходящим способом представления пространства: количество опорных точек может быть сокращено для уменьшения объема памяти, требуемой для хранения информации о пространстве.
     Всем объектам, находящимся в пространстве, ставятся в соответствие плоские горизонтальные полигоны. Множество вершин графа составляют вершины полигонов и точки, заданные для построения маршрута. Далее вершины графа соединяются ребрами в том случае, если между точками на карте, которым соответствуют вершины, существует прямой путь, не пересекающий объекты-препятствия. Пары вершин для соединения ребром выбираются таким образом, чтобы полученный граф являлся плоским. Весом ребра является длина пути между точками. Таким образом, все пространство представляется в виде навигационной сетки. Алгоритм формализации представлен на рис.14.

Рисунок 13 – Алгоритм построения маршрута
     

Рисунок 14 – Алгоритм формализации пространства в виде графа

     Затем полученный граф преобразуется таким образом, чтобы во множестве вершин остались только точки, заданные для построения маршрута. Для этого между каждой парой точек находится оптимальный путь в исходном графе, и они соединяются ребром с весом, равным длине найденного пути. Исходя из анализа алгоритмов нахождения оптимального пути между двумя точками, для использования принят алгоритм А* как наиболее эффективный. Если задано несколько альтернативных начальных и/или конечных точек, ребра строятся только для соединения каждой из них с промежуточными точками маршрута, но не между собой. Алгоритм преобразования представлен на рис.15.

Рисунок 15 – Алгоритм преобразования графа
     Для полученного графа решается незамкнутая задача коммивояжера на подмножестве вершин, которым соответствуют промежуточные точки маршрута. При этом общая длина пути рассчитывается вместе с длиной пути от начала обхода до ближайшей начальной точки и от конца обхода до ближайшей конечной точки. 
     Исходя из сравнения алгоритма ближайшего соседа, генетического и жадного алгоритма [13], генетический алгоритм можно назвать более точным для небольшого объема данных, однако его трудоемкость и время, необходимое для поиска решения, значительно превышают те же показатели для двух других алгоритмов. При увеличении числа вершин графа генетический алгоритм проигрывает двум другим алгоритмам по всем параметрам. Результаты сравнения алгоритмов представлены в Таблице 2.
     Таблица 2 – Сравнение алгоритма ближайшего соседа, генетического и жадного алгоритмов при решении задачи коммивояжера
АлгоритмДлина оптимального маршрутаЗатраченное времяКоличество итерацийКоличество вершин - 100Алгоритм ближайшего соседа266642,5100Генетический алгоритм254794510000Жадный алгоритм233110,0718Количество вершин - 1000Алгоритм ближайшего соседа8393895,51000Генетический алгоритм28286646810000Жадный алгоритм72801127151     
     Поскольку при разработке модуля необходимо учитывать не только оптимальность найденного маршрута, но и быстродействие, обеспечивающее удобство использования, на данном этапе не применимы точные методы нахождения оптимального пути, т.к. они требуют значительных временных затрат. Согласно проведенному анализу, наиболее подходящим для решения данной задачи является жадный алгоритм. 
     Таким образом, строится близкий к оптимальному маршрут через все указанные точки.
     
2.3 Разработка алгоритма визуализации маршрута
     Построенный маршрут разбивается на участки – отрезки пути между двумя соседними точками маршрута. Во избежание рассеяния внимания пользователя при работе с картой, маршрут отображается не целиком, а только его текущий участок. Отрезок пути, соответствующий участку маршрута, изображается яркой контрастной линией на карте пространства. Конец участка маршрута отображается ярким маркером для удержания внимания пользователя на цели передвижения.
     Поскольку ребрам между каждой парой точек в модифицированном графе, получение которого описано в п.2.2, соответствует оптимальный путь, найденный на исходном графе, участок пути представляет собой ломаную линию, отрезками которой являются ребра, составляющие найденный оптимальный путь между двумя точками.
     Переключение между участками маршрута происходит тогда, когда в процессе моделирования прохождения маршрута пользователь достигает конечной точки участка. Пройденный участок маршрута и его конечная точка удаляются с карты, затем отображается следующий участок маршрута и его конечная точка. Алгоритм визуализации маршрута представлен на рис.16.

Рисунок 16 – Алгоритм визуализации маршрута
     
2.4 Разработка алгоритма моделирования прохождения маршрута
     Для привлечения интереса PID и концентрации на задаче ориентирования, моделирование прохождения маршрута было решено реализовать в виде игры с управляемым персонажем. Игровой персонаж – это подвижный объект, перемещением которого управляет пользователь. Игровой персонаж необходим для того, чтобы пользователь мог отождествить себя с ним и таким образом изучить и запомнить порядок прохождения маршрута.
     Управление персонажем осуществляется с помощью кнопок движения вперед, назад, влево и вправо. Длина пути, пройденного персонажем, запоминается. После достижения игровым персонажем конечной точки текущего участка маршрута пользователю выводится сообщение с длиной пройденного пути, длиной оптимального пути и графической оценкой успешности прохождения.
     Для оценки успешности прохождения маршрута составляется отношение длины пройденного персонажем пути к длине оптимального маршрута. Результат визуализируется в виде звезд рейтинга. В зависимости от значения полученного отношения, возможны следующие результаты:
     - меньше или равно 1.3: 3 звезды;
     - от 1.3 до 1.6: 2 звезды;
     - от 1.6 до 2: 1 звезда;
     - больше 2: 0 звезд.
     Численная информация предназначена для опекуна пользователя, который может контролировать процесс изучения маршрута, а графическая – для самого пользователя. После достижения конечной точки последнего участка маршрута пользователю выводится аналогичное сообщение с общей оценкой прохождения маршрута. Алгоритм моделирования прохождения маршрута представлен на рис.17.

Рисунок 17 – Алгоритм моделирования прохождения маршрута
     
2.5 Выводы
     Генерация «2D прогулки» требует последовательного решения следующих задач:
     - формализация пространства в виде графа;
     - нахождение оптимальных путей между парами заданных вершин;
     - решение задачи коммивояжера;
     - визуализация найденного пути;
     - моделирование прохождения найденного пути.
     Для решения задачи формализации пространства выбран способ представления пространства в виде навигационной сетки. Нахождение оптимальных путей на полученном графе осуществляется с помощью алгоритма А*.
     Решение задачи коммивояжера осуществляется с помощью жадного алгоритма, что позволяет найти близкий к оптимальному маршрут за время, допустимое для сохранения быстродействия и удобства использования модуля.
     Визуализация построенного маршрута осуществляется поэтапно в процессе моделирования прохождения маршрута. Алгоритм моделирования прохождения маршрута реализован с применением игровых технологий.
     
3 Проектирование модуля генерации «2D прогулки»
3.1 Проектирование функциональности модуля
      В соответствии с анализом задачи генерации «2D прогулки» и требований к ее решению, определен список функций, выполнение которых должен обеспечить разрабатываемый модуль:
      - загрузка и отображение выбранной карты пространства;
      - загрузка списка объектов для построения маршрута;
      - построение размеченного маршрута;
      - отображение игрового персонажа на карте пространства;
      - отображение текущего участка маршрута на карте пространства;
      - моделирование передвижения игрового персонажа по маршруту;
      - отображение результатов моделирования;
      - сохранение результатов «2D прогулки».
      Модель пространства должна иметь визуальное сходство с помещением, для которого генерируется «2D прогулка». Масштаб выбирается таким образом, чтобы пользователь мог ассоциировать виртуальную «прогулку» с настоящей.
      Если объект на карте пространства имеет название, через него может быть проложен маршрут. Объект, не имеющий названия, является препятствием и не может быть включен в маршрут. В качестве идентификатора объекта для включения его в список объектов для построения маршрута используется название объекта.
      Для передачи 
      
Свободное описание функций и ссылка на ТЗ в приложении
     Диаграмма прецедентов
     Интеграция модуля
     Концепция развития
     

Рисунок 18 – Диаграмма прецедентов
     
     
     Модуль предназначен для развития и поддержки навыка ориентирования в закрытом пространстве с помощью карты. Пространство представляет собой модель помещения с одним или несколькими входами и выходами, которое заполнено объектами. Модель пространства представлена на рис.16.
     Задача ориентирования состоит из следующих этапов:
     - задание точек, которые необходимо обойти;
     - генерация маршрута от входа к выходу, проходящего через заданные точки;
     - отображение маршрута на карте;
     - прохождение маршрута.
     Модуль предназначен для интеграции с мобильными приложениями для PID, которые могут осуществлять поддержку различных повседневных процессов и обучение разным навыкам. Поскольку задача ориентирования в закрытом пространстве является частью многих процессов, генерация маршрута должна осуществляться на любом заданном пространстве и для любого списка точек обхода. Таким образом, идентификатор пространства и список точек, через которые необходимо построить маршрут, должны быть входными данными для модуля.
     Объекты на карте пространства могут иметь название, в таком случае через них может быть проложен маршрут. Если объект не имеет названия, он является препятствием и не может быть включен в маршрут. Для задания списка точек используются названия объектов.
     Модуль должен хранить модели доступных пространств. Добавление новых моделей возможно двумя способами: вручную или с помощью специально разработанного редактора. Реализация приложения для добавления моделей пространства не входит в задачи данной работы, поэтому будет использоваться только ручное добавление.
     Построение маршрута и разбиение его на участки должно осуществляться до отображения карты пространства пользователю. Во время взаимодействия пользователя с модулем на карте пространства должен отображаться только текущий участок маршрута. Модель карты пространства с размеченным маршрутом представлена на рис.17.
     После завершения прохождения маршрута и вывода информации о результате прохождения, модуль должен сохранять следующие данные о прохождении маршрута:
     - дата и время начала прохождения маршрута;
     - дата и время окончания прохождения маршрута;
     - идентификатор пространства;
     - описание сгенерированного маршрута в виде порядка точек обхода;
     - общую результативность прохождения (соотношение длины пути, пройденного пользователем в процессе моделирования прохождения маршрута, к длине построенного оптимального (близкого к оптимальному) пути).

3.2 Описание сценариев использования
3.3 Проектирование графического интерфейса
3.4 Выводы

Описание формата входных и выходных данных
     Входными данными для модуля являются:
     - идентификатор пространства: строка;
     - названия точек обхода: список строк.
     В модуле должны быть реализованы два способа передачи входных данных: в качестве параметров функции вызова модуля и с помощью текстового файла в формате JSON. Во втором случае файл должен иметь название «input.json» и содержать данные в следующем формате:
     {
     	«space»: <идентификатор пространства>,
     	«waypoints»:
     		[
     			<название точки 1>,
     			< название точки 2>,
     			…
     			< название точки N>
     		]
     }
     Выходными данными для модуля являются:
     - дата начала прохождения маршрута: дата;
     - время начала прохождения маршрута: время;
     - дата окончания прохождения маршрута: дата;
     - время окончания прохождения маршрута: время;
     - идентификатор пространства: строка;
     - описание маршрута: список строк;
     - длина сгенерированного пути: десятичная дробь;
     - длина пути, пройденного пользователем: десятичная дробь.
     Выходные данные должны быть сохранены в текстовый файл формата JSON – в главу 4 Разработка


      4 Реализация модуля генерации «2D прогулки»
      4.1 Выбор средств реализации

      Платформа, язык, библиотеки
      
      4.2 Описание структуры входных и выходных данных
      Формат и способ передачи входных данных, формат и способ сохранения выходных данных, ссылка на приложение с примеров выходного файла

      4.3 Описание результатов реализации модуля
     	Описание этапов реализации модуля
     (Первый этап – основные функции (нахождение и визуализация маршрута, моделирование его прохождения), второй – создание интерфейса (выбор тестового примера(?), добавление экранов результата прохождения участка и всего маршрута), третий этап - релиз – графическое оформление (добавление моделей объектов для имитации обстановки, например, магазина))

      Краткое описание использованных сторонних компонентов (NavMesh), диаграмма классов, экранные формы игры. Описание подготовки к тестированию и добавление экрана настройки тестовых данных.
      4.4 Тестирование модуля
      Описание тестовой группы (взрослые и дети без особенностей развития, дети с задержкой развития и расстройствами аутического спектра и их родители
      Описание тестовых сценариев
      Отчет по итогам тестирования. Что понятно, что нет. Изменения по итогам тестирования – изменение положения элементов управления, изменение вида камеры на персонажа.
      4.5 Выводы

Заключение
     


СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ
     
1. Directorix. Интерактивная навигация [Электронный ресурс]. – Режим доступа: http://directorix.ru/functionality/  (дата обращения: 01.12.2019)
2. Изотова Т.Ю. Обзор алгоритмов поиска кратчайшего пути в графе // Новые информационные технологии в автоматизированных системах. 2016. №19.
3. Introduction to the A* Algorithm [Электронный ресурс]. – Режим доступа: https://www.redblobgames.com/pathfinding/a-star/introduction.html (дата обращения: 04.12.2019).
4. Левитин А. Алгоритмы. Введение в разработку и анализ. Вильямс, 2006. 35–36 с.
5. Tannenbaum P. Excursions in Mathematics. University of Kansas, 2011. P. 25.
6. Tollis I. G. Algorithms and Complexity. University of Crete, 2000. P. 140–146.
7. Захарова Е.М., Минашина И.К. Обзор методов многомерной оптимизации // Информационные процессы, 2014. Том 14, № 3. стр. 265– 266.
8. Johnson D. S., McGeoch L. A., Rothberg E. E. Asymptotic Experimental Analysis for the Held-Karp Traveling Salesman Bound. AT&T Bell Laboratories, 1999 P. 1–2.
9. Alsalibi B.A., Jelodar M.B., Venkat I. A Comparative Study between the Nearest Neighbor and Genetic Algorithms: A revisit to the Traveling Salesman Problem // International Journal of Computer Science and Electronics Engineering (IJCSEE), 2013. Vol. 1, Issue 1.
10. Basu S. Tabu Search Implementation on Traveling Salesman Problem and Its Variations: A Literature Survey. Indian Institute of Management Calcutta, 2012. P. 1–8.
11. Nilsson C. Heuristics for the Traveling Salesman Problem. Linkoping University, 2011. P. 1–6.
12. Indoor navigation: knowledge [Электронный ресурс]. – Режим доступа: https://www.indoornavigation.com/knowledge (дата обращения: 09.12.2019).
13. Abdulkarim H.A., Alshammari I. F. Comparison of Algorithms for Solving Traveling Salesman Problem. // International Journal of Engineering and Advanced Technology, 2015. Vol.4, Issue 6. P. 76–79.
14.  Кунсткамера. Гид по музею [Электронный ресурс]. – Режим доступа: https://play.google.com/store/apps/details?id=com.msl.kunstkamera (дата обращения: 10.12.2019).
15. Музей Пушкина. Гид по музею [Электронный ресурс]. – Режим доступа: https://play.google.com/store/apps/details?id=pro.indoorsnavi.puskinmuseum (дата обращения: 10.12.2019).
16. Shopping Guide – карты торговых центров Москвы [Электронный ресурс]. – Режим доступа: https://play.google.com/store/apps/details?id=com.infoshopping.app (дата обращения: 12.12.2019).
17. NaviMail – навигация в торговых центрах [Электронный ресурс]. – Режим доступа: https://play.google.com/store/apps/details?id=com.smartlabs.instorenavi (дата обращения: 13.12.2019).
18. Бот «Картография» [Электронный ресурс]. – Режим доступа: https://vk.com/kartografia_bot (дата обращения: 13.12.2019).
     ВРБ — 40 461 806 — 10.27— -- — 20.81
     
     36
     
